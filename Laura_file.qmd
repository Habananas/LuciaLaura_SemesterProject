---
title: "Strava_File"
format: html
---

# STRAVA PROJECT 

### Libraries and Files
```{r}
# install.packages("XML")
# install.packages("gitcreds")
library("readr")
library(sf)
library(ggplot2)
library(dplyr)
library("gitcreds")
library(XML) #to read the XML data of gpx files
library(leaflet) #to show in a map

laura_act <- read.csv("data/activities_Laura.csv")
lucia_act <- read.csv("NO FILE ")
```

### Understanding GPX 
https://www.appsilon.com/post/r-gpx-files
GPX is a very common map data format used to store GPS data of routes. GPX is basically XML, therefore, we need to install the XML package. 

- GPX is just a fancier version of xml, so we can recycle sml tools
We will load the data of one GPX track as a html file, but the loaded gpx data looks pretty messy, It is thus necessary to tidy it by identifying key structures: 
- trkpt element = contains latitude and longitude information for every point
- ele tag = contains the elevation.
- time = contains UTC-8 Timeinformation

The html looks like this: 
</trkpt><trkpt lat="47.2176510" lon="8.6811000"> <ele>511.9<
/ele><time>2024-03-25T16:03:41Z<
/time><extensions><trackpointextension><cad>0</cad></trackpointextension></extensions>


### Data Exploration and Organisation
```{r}

# Get a list of files in the folder
folder_path <- "data/activities_Laura/"
file_list <- list.files(folder_path, full.names = TRUE)

```

### Function
Create a function that assigns coordinates, elevation, time and activity name out of the gpx file, then apply this function to all of the gpx files:
```{r}
gpx_to_df <- function(gpx_path) {
  
  gpx_parsed <- htmlTreeParse(file = gpx_path, useInternalNodes = TRUE)
  
  # read out elements of the html file to vecotrs
coords <- xpathSApply(doc = gpx_parsed, path = "//trkpt", fun = xmlAttrs)
elevation <- xpathSApply(doc = gpx_parsed, path = "//trkpt/ele", fun = xmlValue)
time <- xpathSApply(doc = gpx_parsed, path = "//time", fun = xmlValue)
activity_name <- xpathSApply(doc = gpx_parsed, path = "//name", fun = xmlValue)
activity_type <- xpathSApply(doc = gpx_parsed, path = "//type", fun = xmlValue)

# remove first value of time, as it stems from the metadata and matches the second value (i.e. first timestamp of trackpoint)
time <- time[-1]

# convert vectors to a data frame
df <- data.frame(
  lat = as.numeric(coords["lat", ]),
  lon = as.numeric(coords["lon", ]),
  elevation = as.numeric(elevation), 
  timestamp = as.POSIXct(time,tz="UTC", format=c("%Y-%m-%dT%H:%M:%OS")),
  ActivityName = activity_name,
  ActivityType = activity_type
) 

dfname <- print(substring(gpx_path, 12, 34))

assign(dfname, df, envir = .GlobalEnv)
}

# Iterate over each file and apply your function
for (file_path in file_list) {
  gpx_to_df(file_path)
}

```

### Combine single track-files to one Dataframe
Here I stitch the single dataframes containing the tracks' information together 
```{r}
#create a list of the df names
file_list
dflist_Laura <- substring(file_list,12,34)

all_tracks_Laura <- do.call(rbind, lapply(dflist_Laura, get))
```


### Converting the df to sf object
```{r}
library(sf)
all_tracks_Laura <- st_as_sf(all_tracks_Laura, coords = c("lon", "lat"), crs = 4326)
str(all_tracks_Laura)
```

### Transforming the crs & Timezone
We would like the CRS to be in the format of CH1903 +LV95 or EPSG:2056
```{r}
all_tracks_Laura <- st_transform(all_tracks_Laura, 2056)
str(all_tracks_Laura)

# Check Timezone
attr(all_tracks_Laura$timestamp, "tzone")
```



###  Filtering out old data
```{r}
library(lubridate)
all_tracks_Laura <- all_tracks_Laura |> 
  mutate("year" = year(timestamp)) |> 
  filter(year == 2024)
```

### (LAURA) Trajectories per day (so every activity that was done on a new day gets a new ID)
```{r}

all_tracks_Laura <- all_tracks_Laura %>%
  mutate(timestamp = ymd_hms(timestamp)) %>%
  arrange(timestamp) %>%
  mutate(diff = c(0, diff(timestamp)),
         trajID = cumsum(diff > hours(2)))%>%
  mutate(trajID = trajID + 1)

all_tracks_Laura$diff <- NULL
```

### Making a map of the data
```{r}
library(tmap)

tmap_mode("view")

#reclassify trackID as char:
class(all_tracks_Laura$trajID)
as.numeric(all_tracks_Laura$trajID)
all_tracks_Laura$trajID <- as.character(all_tracks_Laura$trajID)

# display all trajectories by trackID 
tm_shape(all_tracks_Laura)+
  tm_dots(col = "trajID", palette = "RdYlGn") 

```

### filter by activity
```{r}
 running_Laura <- all_tracks_Laura  |> 
  filter(ActivityType == "running")

bike_Laura <- all_tracks_Laura  |> 
  filter(ActivityType == "cycling")

train <- all_tracks_Laura  |> 
  filter(ActivityType == "Canoeing")

car_Laura <- all_tracks_Laura  |> 
  filter(trajID == "2") #this one I saw from the movement pattern 

#changing activity Type

all_tracks_Laura <- all_tracks_Laura %>%
  mutate(ActivityType = ifelse(trajID == 2, "car", ActivityType))

all_tracks_Laura <- all_tracks_Laura %>%
  mutate(ActivityType = ifelse(trajID == 3, "mixed", ActivityType))


all_tracks_Laura <- all_tracks_Laura %>%
  mutate(ActivityType = ifelse(trajID == 1, "trainride", ActivityType))

all_tracks_Laura <- all_tracks_Laura %>%
  mutate(ActivityType = ifelse(ActivityType == "Canoeing", "trainride", ActivityType))


#display activities by type

tm_shape(all_tracks_Laura)+
  tm_dots(col = "ActivityType", palette = "RdYlGn") 


```




# Old Stuff (not to use)

```{r}
#the coord info is in gpx file for every activity. 
coords <- xpathSApply(doc = gpx_1, path = "//trkpt", fun = xmlAttrs) # question: if we use the same from gpx1 for all, is that a problem?
elevation <- xpathSApply(doc = gpx_1, path = "//trkpt/ele", fun = xmlValue) # same question

df <- data.frame(
  lat = as.numeric(coords["lat", ]),
  lon = as.numeric(coords["lon", ]),
  elevation = as.numeric(elevation)
)

head(df, 10)
tail(df, 10)

plot(x = df$lon, y = df$lat, type = "l", col = "black", lwd = 3,
     xlab = "Longitude", ylab = "Latitude")
```
###CHAT GTP idea: 
make a df that has all the lat lon and elevation infos of all the trips, and give them a column with a unique ID per trip. 
then this huge df can be set into one map, structured by ID. 
therefore, I would need to add a column that has the ID 
```{r}
#CHAT GTP proposes this: 
gpx_files <- list.files("data/Laura_Strava/activities", pattern = "\\.gpx$", full.names = TRUE)

head(gpx_files)

process_gpx <- function(file, id) {
  doc <- xmlTreeParse(file, useInternalNodes = TRUE)
  coords <- xpathApply(doc, "//trkpt", function(x) as.numeric(xmlAttrs(x)[c("lat", "lon")]))
  elevation <- xpathSApply(doc, "//trkpt/ele", xmlValue)
  df <- data.frame(
    lat = coords[, 1],
    lon = coords[, 2],
    elevation = as.numeric(elevation),
    object_id = id
  )
  return(df)
}

all_data <- do.call(rbind, lapply(seq_along(gpx_files), function(i) {
  process_gpx(gpx_files[i], i)
}))

head(all_data)

```


```{r}
library(XML)

# Create a list of all GPX file paths
gpx_files <- list.files("data/Laura_Strava/activities", pattern = "\\.gpx$", full.names = TRUE)

# Function to process a single GPX file
process_gpx <- function(file, id) {
  doc <- xmlTreeParse(file, useInternalNodes = TRUE)
  
  coords <- xpathApply(doc, "//trkpt", function(node) {
    lat <- as.numeric(xmlValue(node["lat"]))
    lon <- as.numeric(xmlValue(node["lon"]))
    return(c(lat, lon))
  })
  
  elevation <- xpathSApply(doc, "//trkpt/ele", xmlValue)
  
  df <- data.frame(
    id = id,
    lat = unlist(coords[1,]),
    lon = unlist(coords[2,]),
    elevation = as.numeric(elevation)
  )
  
  return(df)
}

# Process all GPX files and combine into a single dataframe
all_data <- do.call(rbind, lapply(seq_along(gpx_files), function(i) {
  process_gpx(gpx_files[i], i)
}))

```


### loading several files into one Map
https://stackoverflow.com/questions/54726758/merging-multiple-gpx-files-into-a-single-gpx-file-with-multiple-tracks --- didnt work, as old plotKML used and bc of other stuff. 

```{r}
gpx_files <- c("data/Laura_Strava/activities/11091356418.gpx","data/Laura_Strava/activities/11103101530.gpx", "data/Laura_Strava/activities/11116616348.gpx", "data/Laura_Strava/activities/11188517987.gpx", "data/Laura_Strava/activities/11203431760.gpx", "data/Laura_Strava/activities/11209427592.gpx", "data/Laura_Strava/activities/11239313364.gpx")


```

```{r}
```




## colouring etc
```{r}
library(leaflet)

leaflet() %>%
  addTiles() %>%
  addPolylines(data = df, lat = ~lat, lng = ~lon, color = "#000000", opacity = 0.8, weight = 3)


get_color <- function(elevation) {
  if (elevation < 500) {
    return("green")
  }
  if (elevation < 1000) {
    return("yellow")
  }
  if (elevation < 1500) {
    return("orange")
  }
  return("red")
}




# New dataset with the new variable for color
df_color <- df %>%
  rowwise() %>%
  mutate(color = get_color(elevation))

df_color$last_color <- dplyr::lag(df_color$color)

# Map
map <- leaflet() %>% addTiles()
for (color in levels(as.factor(df_color$color))) {
  map <- addPolylines(map, lat = ~lat, lng = ~lon, data = df_color[df_color$color == color | df_color$last_color == color, ], color = ~color)
}
map
```
